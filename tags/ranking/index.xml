<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ranking on DAXPY</title><link>https://daxpy.xyz/tags/ranking/</link><description>Recent content in Ranking on DAXPY</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 25 Sep 2021 05:04:51 +0530</lastBuildDate><atom:link href="https://daxpy.xyz/tags/ranking/index.xml" rel="self" type="application/rss+xml"/><item><title>RankNet and LambdaRank</title><link>https://daxpy.xyz/notes/2021-09-25-ranknet-and-lambdarank/</link><pubDate>Sat, 25 Sep 2021 05:04:51 +0530</pubDate><guid>https://daxpy.xyz/notes/2021-09-25-ranknet-and-lambdarank/</guid><description>&lt;h1 id="ranknet-and-lambdarank">RankNet and LambdaRank&lt;/h1>
&lt;p>The ranking problem is about ordering a collection of documents according to their relevance to the given query.&lt;/p>
&lt;p>Their are multiple approaches to the problem, but in pairwise approach, we simply care about predicting order of document pairs for the query. Given 2 documents $d_i$ and $d_j$ the true relative ordering is specified as
$$h_{ij} = \begin{cases}1&amp;amp; d_i&amp;gt;d_j\\0&amp;amp; d_i=d_j\\-1&amp;amp; d_i&amp;lt;d_j\\\end{cases}$$&lt;/p>
&lt;p>In terms of modelling, we assume there is a base model takes in features $x_i$ corresponds to document $d_i$ and predict a score depicting relevance to the given query. $$s_i = f(x_i)$$&lt;/p></description></item></channel></rss>