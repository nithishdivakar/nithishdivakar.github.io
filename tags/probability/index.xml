<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Probability on DAXPY</title><link>https://daxpy.xyz/tags/probability/</link><description>Recent content in Probability on DAXPY</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 17 Mar 2024 21:44:15 +0530</lastBuildDate><atom:link href="https://daxpy.xyz/tags/probability/index.xml" rel="self" type="application/rss+xml"/><item><title>Sampling in a Sphere</title><link>https://daxpy.xyz/posts/sampling-in-a-sphere/</link><pubDate>Sun, 17 Mar 2024 21:44:15 +0530</pubDate><guid>https://daxpy.xyz/posts/sampling-in-a-sphere/</guid><description>&lt;h1 id="sampling-in-a-sphere">Sampling in a Sphere&lt;/h1>
&lt;p>Understanding how to generate a uniform sample of points inside a sphere takes us through a few interesting topics. So let begin with the end in mind.&lt;/p>
&lt;p>The following algorithm generates a uniform sample of points inside sphere in n dimensions.&lt;/p>
&lt;p>$$u_1, \ldots, u_{n+2} \sim \mathcal{N}(0,1)$$
$$x_1, \ldots, x_n = \frac{(u_1,\ldots, u_n)}{\sqrt{u_1^2+\ldots+u_{n+2}^{2}}}$$&lt;/p>
&lt;p>There is a lot to unpack here.&lt;/p>
&lt;ul>
&lt;li>Why are we sampling from a normal distribution to get a uniform distribution?&lt;/li>
&lt;li>Why $n+2$ ?&lt;/li>
&lt;li>Why are we dropping 2 coordinates?&lt;/li>
&lt;/ul>
&lt;h2 id="what-is-inside-a-sphere">What is inside a Sphere?&lt;/h2>
&lt;p>A sphere is defined as a set of points which are equidistant from a point known as center. For this article, we mostly deal with unit spheres. A unit n-sphere with center at origin can be defined as
$$ S^n = \{x \in \mathbb{R}^{n} &lt;del>:&lt;/del> \|x\| = 1\} $$&lt;/p></description></item><item><title>Variational Inference</title><link>https://daxpy.xyz/posts/variational-inference/</link><pubDate>Sun, 16 Apr 2023 12:15:00 +0530</pubDate><guid>https://daxpy.xyz/posts/variational-inference/</guid><description>&lt;h1 id="variational-inference">Variational Inference&lt;/h1>
&lt;p>We have some data from a population and we suspect that the it is generated by some underlying process. Estimating the process which generates the data allows us to understand its fundamental properties.&lt;/p>
&lt;p>Concretely, $p(x)$ is the distribution of the data and $z$ are its latent variables, the process which generates the data is $p(x|z)$.
Estimating the generation process is computing the true posterior $p(z|x)$. This is the (posterior) inference problem.&lt;/p></description></item><item><title>Reservoir Sampling</title><link>https://daxpy.xyz/notes/reservoir-sampling/</link><pubDate>Fri, 01 Apr 2022 04:00:00 +0530</pubDate><guid>https://daxpy.xyz/notes/reservoir-sampling/</guid><description>&lt;h1 id="reservoir-sampling">Reservoir Sampling&lt;/h1>
&lt;p>How can you uniformly sample $k$ items from a stream?&lt;/p>
&lt;p>Reservoir Sampling is used when you want a uniform sample from a stream. The length of the stream is not known before and the stream is large enough that we cannot look back or store everything.&lt;/p>
&lt;p>The algorithm is simple.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Reservoir Sampling&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>reservoir[&lt;span style="color:#ae81ff">1&lt;/span>:k] &lt;span style="color:#f92672">=&lt;/span> stream[&lt;span style="color:#ae81ff">1&lt;/span>:k]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>k&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> to n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j &lt;span style="color:#f92672">=&lt;/span> random(&lt;span style="color:#ae81ff">1&lt;/span>,i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> j &lt;span style="color:#f92672">&amp;lt;&lt;/span> k:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reservoir[j] &lt;span style="color:#f92672">=&lt;/span> stream[i]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let prove the above process does infact gives us a uniform sample.&lt;/p></description></item></channel></rss>